See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (1 warning)
Checkstyle:   FAILED (0 errors, 10 warnings)

Correctness:  70/70 tests passed
Memory:       10/10 tests passed
Timing:       151/163 tests passed

Aggregate score: 93.53%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.9K Oct 12 06:19 BurrowsWheeler.java
2.3K Oct 12 06:19 CircularSuffixArray.java
3.0K Oct 12 06:19 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------
BurrowsWheeler.java:64: warning: [rawtypes] found raw type: Queue
        Queue<Integer>[] tQueue = (Queue<Integer>[]) new Queue[R];
                                                         ^
  missing type arguments for generic class Queue<Item>
  where Item is a type-variable:
    Item extends Object declared in class Queue
BurrowsWheeler.java:64: warning: [unchecked] unchecked cast
        Queue<Integer>[] tQueue = (Queue<Integer>[]) new Queue[R];
                                                     ^
  required: Queue<Integer>[]
  found:    Queue[]
2 warnings

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:12: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 1 warning.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:44:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] MoveToFront.java:38:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] MoveToFront.java:75:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 3 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:19:9: You should not need to use the 'ArrayList' data type in this program. [Design]
[WARN] BurrowsWheeler.java:19:43: You should not need to create objects of type 'java.util.ArrayList' in this program. [Design]
[WARN] BurrowsWheeler.java:28:43: The numeric literal '32' appears to be unnecessary. [NumericLiteral]
[WARN] BurrowsWheeler.java:36: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'transform()'. [MethodCallCount]
[WARN] BurrowsWheeler.java:53:9: You should not need to use the 'StringBuilder' data type in this program. [Design]
[WARN] BurrowsWheeler.java:53:32: You should not need to create objects of type 'java.lang.StringBuilder' in this program. [Design]
[WARN] BurrowsWheeler.java:110: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'inverseTransform()'. [MethodCallCount]
Checkstyle ends with 0 errors and 7 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 17 total tests.

Test 0: check index() and length() with strings from text files
  * abra.txt
  * weekend.txt
  * banana.txt
==> passed

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings (excluding 0x00')
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 6: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 7: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 8: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 9: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 10: check that constructor throws an exception when argument is null
==> passed

Test 11: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 12: check that CircularSuffixArray is immutable
  * string = "ETLMZGEYSDPVUUKDQOGCEXODRIDTNQ"
  * string = "ABBBBBBBBAAABABAAAABBBABABBABB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 15 db 01 d4 55 20 7b b0 a5 9f 17 fc 13 76 31 
==> passed

Test 13: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 14: check index() and length() with strings that are nontrivial
         circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 15: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 16: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 17/17 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * amendments.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 8a: check encode() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * aesop.txt.mtf
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 8a: check transform() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check inverseTransform() on large files
  * aesop.txt.bwt
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 28/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          760
=> passed       32         1416
=> passed       64         2728
=> passed      128         5352
=> passed      256        10600
=> passed      512        21096
=> passed     1024        42088
=> passed     2048        84072
=> passed     4096       168040
=> passed     8192       335976
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 41.00 n + 104.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      26.46
=> passed     2000       0.00       0.00       8.80
=> passed     4000       0.01       0.00       5.11
=> passed     8000       0.01       0.00       6.06
=> passed    16000       0.02       0.00       4.59
=> FAILED    32000       0.11       0.00      23.32
=> FAILED    64000       0.15       0.01      23.97
=> passed   128000       0.23       0.13       1.77
=> FAILED   256000       0.53       0.03      18.94
=> FAILED   512000       0.89       0.06      14.30
=> FAILED  1024000       2.02       0.13      15.58
=> passed  2048000       4.50       0.42      10.77
=> FAILED  4096000      11.00       0.80      13.68

Estimated running time (using last 6 measurements)
    = 5.91e-07 * n^1.09  (R^2 = 1.00)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       8.49
=> passed     2000       0.00       0.00       5.11
=> passed     4000       0.00       0.00       5.09
=> passed     8000       0.01       0.00       9.35
=> passed    16000       0.01       0.00      14.91
=> passed    32000       0.02       0.00      19.79
=> passed    64000       0.06       0.00      21.55
=> passed   128000       0.13       0.01      21.53
=> passed   256000       0.21       0.01      14.30
=> passed   512000       0.68       0.04      16.20
=> FAILED  1024000       1.50       0.05      28.23
=> FAILED  2048000       3.05       0.14      22.19
=> passed  4096000       7.19       0.39      18.56

Estimated running time (using last 6 measurements)
    = 8.32e-08 * n^1.20  (R^2 = 0.99)


Total: 18/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 40 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 3: count calls to methods in BinaryStdIn from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdIn from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  5-14: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.94
=> passed     2000       0.00       0.00       1.51
=> passed     4000       0.01       0.00       1.58
=> passed     8000       0.01       0.01       1.57
=> passed    16000       0.02       0.02       1.53
=> passed    32000       0.05       0.03       1.51
=> passed    64000       0.09       0.06       1.56
=> passed   128000       0.27       0.12       2.29
=> passed   256000       0.44       0.23       1.92

Estimated running time (using last 6 measurements)
     = 7.68e-07 * n^1.07  (R^2 = 0.99)


Tests  15-22: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.69
=> passed     2000       0.00       0.00       1.68
=> passed     4000       0.01       0.00       1.69
=> passed     8000       0.01       0.01       1.69
=> passed    16000       0.02       0.01       1.70
=> passed    32000       0.05       0.03       1.70
=> passed    64000       0.10       0.07       1.39
=> passed   128000       0.18       0.11       1.68
=> passed   256000       0.36       0.21       1.72

Estimated running time (using last 6 measurements)
     = 1.39e-06 * n^1.00  (R^2 = 1.00)


Tests 23-31: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.94
=> passed     2000       0.00       0.00       2.04
=> passed     4000       0.01       0.00       2.08
=> passed     8000       0.02       0.01       1.90
=> passed    16000       0.04       0.01       2.65
=> passed    32000       0.07       0.03       1.98
=> passed    64000       0.12       0.06       2.12
=> passed   128000       0.24       0.11       2.14
=> passed   256000       0.48       0.22       2.18

Estimated running time (using last 6 measurements)
     = 3.14e-06 * n^0.96  (R^2 = 0.99)


Tests 32-40: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.21
=> passed     2000       0.00       0.00       2.24
=> passed     4000       0.01       0.00       2.23
=> passed     8000       0.01       0.01       2.23
=> passed    16000       0.03       0.01       2.24
=> passed    32000       0.06       0.03       2.24
=> passed    64000       0.12       0.05       2.24
=> passed   128000       0.23       0.11       2.04
=> passed   256000       0.54       0.22       2.44

Estimated running time (using last 6 measurements)
     = 1.40e-06 * n^1.03  (R^2 = 1.00)


Total: 40/40 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 97 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5: count calls to methods in BinaryStdIn from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 6: count calls to methods in BinaryStdIn from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  7-19: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.17
=> passed     2000       0.00       0.00       0.59
=> passed     4000       0.00       0.00       0.49
=> passed     8000       0.00       0.00       0.64
=> passed    16000       0.00       0.00       0.63
=> passed    32000       0.00       0.01       0.68
=> FAILED    64000       0.15       0.01      10.35
=> passed   128000       0.02       0.02       1.03
=> passed   256000       0.05       0.04       1.16
=> passed   512000       0.09       0.08       1.07
=> passed  1024000       0.20       0.31       0.64
=> passed  2048000       0.46       0.44       1.04
=> passed  4096000       1.09       0.75       1.45

Estimated running time as a function of n (using last 6 measurements)
    = 1.73e-08 * n^1.18  (R^2 = 1.00)


Tests 20-32: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.46
=> passed     2000       0.00       0.00       2.71
=> passed     4000       0.00       0.00       1.70
=> passed     8000       0.00       0.00       1.63
=> FAILED    16000       0.13       0.00      65.54
=> passed    32000       0.01       0.00       1.41
=> passed    64000       0.01       0.01       1.37
=> passed   128000       0.11       0.02       7.29
=> passed   256000       0.04       0.03       1.27
=> passed   512000       0.08       0.08       1.09
=> passed  1024000       0.18       0.15       1.25
=> passed  2048000       0.52       0.35       1.49
=> passed  4096000       1.07       1.27       0.84

Estimated running time as a function of n (using last 6 measurements)
    = 3.23e-06 * n^0.81  (R^2 = 0.76)


Tests 33-45: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.89
=> passed     2000       0.00       0.00       1.21
=> passed     4000       0.00       0.00       1.21
=> passed     8000       0.00       0.00       1.20
=> passed    16000       0.00       0.00       1.19
=> passed    32000       0.00       0.00       0.80
=> passed    64000       0.00       0.00       1.89
=> passed   128000       0.00       0.00       1.66
=> passed   256000       0.01       0.00       1.84
=> passed   512000       0.02       0.01       1.83
=> passed  1024000       0.05       0.02       2.48
=> passed  2048000       0.09       0.06       1.43
=> passed  4096000       0.17       0.09       1.92

Estimated running time as a function of n (using last 6 measurements)
    = 1.43e-08 * n^1.07  (R^2 = 1.00)


Tests 46-58: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.24
=> passed     2000       0.00       0.00       0.65
=> passed     4000       0.00       0.00       0.89
=> passed     8000       0.00       0.00       0.66
=> passed    16000       0.00       0.00       0.65
=> passed    32000       0.00       0.00       1.13
=> passed    64000       0.01       0.00       1.65
=> passed   128000       0.01       0.01       1.95
=> passed   256000       0.09       0.01      10.46
=> passed   512000       0.06       0.02       3.68
=> passed  1024000       0.22       0.18       1.26
=> passed  2048000       0.28       0.16       1.72
=> passed  4096000       0.88       0.42       2.10

==> FAILED.   inverseTransform() is possibly n R, n log n, n^2, or worse.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 4.75e-08 * n^1.09  (R^2 = 0.90)


Tests 59-71: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       3.00
=> passed     2048       0.00       0.00       3.21
=> passed     4096       0.00       0.00       2.31
=> passed     8192       0.00       0.00       2.55
=> passed    16384       0.00       0.00       2.87
=> passed    32768       0.07       0.00     109.93
=> passed    65536       0.00       0.00       3.29
=> passed   131072       0.01       0.00       3.75
=> passed   262144       0.02       0.16       0.15
=> passed   524288       0.05       0.02       2.21
=> passed  1048576       0.10       0.05       2.02
=> passed  2097152       0.25       0.20       1.28
=> passed  4194304       0.67       0.47       1.44

Estimated running time as a function of n (using last 6 measurements)
    = 6.04e-09 * n^1.21  (R^2 = 1.00)


Tests 72-84: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.16
=> passed     2000       0.00       0.00       1.93
=> passed     4000       0.00       0.00       1.91
=> passed     8000       0.00       0.00       1.79
=> passed    16000       0.00       0.00       2.20
=> passed    32000       0.00       0.00       2.64
=> passed    64000       0.00       0.00       1.99
=> passed   128000       0.00       0.00       2.27
=> passed   256000       0.01       0.00       2.37
=> passed   512000       0.02       0.01       2.33
=> passed  1024000       0.04       0.02       2.34
=> passed  2048000       0.08       0.03       2.72
=> passed  4096000       0.19       0.08       2.44

==> FAILED.   inverseTransform() is possibly n R, n log n, n^2, or worse.
              The code is at least twice as slow as the reference solution.
              Manually check the code.

Estimated running time as a function of n (using last 6 measurements)
    = 1.29e-08 * n^1.08  (R^2 = 1.00)


Tests 85-97: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       2.42
=> passed     2048       0.00       0.00       2.25
=> passed     4096       0.00       0.00       1.84
=> passed     8192       0.00       0.00       2.27
=> passed    16384       0.00       0.00       2.19
=> passed    32768       0.00       0.00       2.29
=> passed    65536       0.00       0.00       3.45
=> passed   131072       0.01       0.00       2.25
=> passed   262144       0.02       0.01       2.39
=> passed   524288       0.04       0.02       1.74
=> passed  1048576       0.11       0.05       1.97
=> passed  2097152       0.16       0.11       1.46
=> passed  4194304       0.32       0.18       1.78

Estimated running time as a function of n (using last 6 measurements)
    = 4.89e-08 * n^1.04  (R^2 = 0.99)


Total: 93/97 tests passed!


================================================================


