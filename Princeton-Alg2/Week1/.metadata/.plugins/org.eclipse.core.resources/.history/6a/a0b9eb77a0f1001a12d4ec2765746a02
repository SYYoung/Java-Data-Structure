import edu.princeton.cs.algs4.*;

public class Graph {
	private final int V;
	private int E;
	private Bag<Integer>[] adj;
	
	public Graph(int V) {
		this.V = V;
		adj = (Bag<Integer>[]) new Bag[V];
		for (int v=0; v<V; v++)
			adj[v] = new Bag<Integer>();
	}
	
	public Graph(In in) {
		this.V = in.readInt();
		adj = (Bag<Integer>[]) new Bag[V];
		for (int v=0; v<V; v++)
			adj[v] = new Bag<Integer>();
		this.E = in.readInt();
		for (int i=0; i<E; i++) {
			int v = in.readInt();
			int w = in.readInt();
			addEdge(v,w);
		}
	}
	
	public void addEdge(int v, int w) {
		adj[v].add(w);;
		adj[w].add(v);
		E++;
	}
	
	public Iterable<Integer> adj(int v) {
		return adj[v];
	}
	
	public int V() {
		return V;
	}
	
	public int E() {
		return E;
	}
	
	public String toString() {
		StringBuilder s = new StringBuilder();
		s.append(V + "vertices, " + E + " edges " +"\n");
		for (int v=0; v<V; v++) {
			s.append(v + ": ");
			for (int w: adj[v])
				s.append(w + " ");
			s.append("\n");
		}
		return s.toString();
	}
	
	public static void main(String args[]) {
		In in = new In(args[0]);
		Graph G = new Graph(in);
		
		for (int v = 0; v < G.V(); v++) {
			for (int w: G.adj(v))
				StdOut.println(v + "-" + w);
		}
	}
}
