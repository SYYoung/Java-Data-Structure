See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 2 warnings)
API:          PASSED

Spotbugs:     PASSED
PMD:          FAILED (10 warnings)
Checkstyle:   FAILED (0 errors, 8 warnings)

Correctness:  23/23 tests passed
Memory:       2/4 tests passed
Timing:       1/1 tests passed

Aggregate score: 95.00%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
9.6K Sep 25 12:27 BaseballElimination.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac BaseballElimination.java
*-----------------------------------------------------------
BaseballElimination.java:33: warning: [rawtypes] found raw type: Bag
        certificate = (Bag<Integer>[]) new Bag[totalTeams + 1];
                                           ^
  missing type arguments for generic class Bag<Item>
  where Item is a type-variable:
    Item extends Object declared in class Bag
BaseballElimination.java:33: warning: [unchecked] unchecked cast
        certificate = (Bag<Integer>[]) new Bag[totalTeams + 1];
                                       ^
  required: Bag<Integer>[]
  found:    Bag[]
2 warnings


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
BaseballElimination:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'displayTeamRecord()' is never called.  At BaseballElimination.java:[lines 170-183]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'val' but that value is never used.  At BaseballElimination.java:[line 198]


================================================================


% pmd .
*-----------------------------------------------------------
BaseballElimination.java:24: The private instance (or static) variable 'certificate' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:27: The private instance (or static) variable 'startNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:28: The private instance (or static) variable 'endNode' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:119: Avoid unused local variables, such as 'teamExcluded'. [UnusedLocalVariable]
BaseballElimination.java:120: Avoid unused local variables, such as 'teamName'. [UnusedLocalVariable]
BaseballElimination.java:168: Avoid unused private methods, such as 'displayTeamRecord()'. [UnusedPrivateMethod]
BaseballElimination.java:198: Avoid unused local variables, such as 'val'. [UnusedLocalVariable]
BaseballElimination.java:266: The private instance (or static) variable 'name' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:267: The private instance (or static) variable 'wins' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BaseballElimination.java:268: The private instance (or static) variable 'losses' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
PMD ends with 10 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BaseballElimination.java:26:5: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
[WARN] BaseballElimination.java:26:30: The constant 'notYet' must be ALL_UPPERCASE, with words separated by underscores. [ConstantName]
[WARN] BaseballElimination.java:121:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:185:61: The parameter variable 'R' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] BaseballElimination.java:195:59: The parameter variable 'R' must start with a lowercase letter and use camelCase. [ParameterName]
[WARN] BaseballElimination.java:210:22: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] BaseballElimination.java:251:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BaseballElimination.java:252:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
Checkstyle ends with 0 errors and 8 warnings.

% custom checkstyle checks for BaseballElimination.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of BaseballElimination
*-----------------------------------------------------------
Running 23 total tests.

Test 1: check numberOfTeams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 2: check teams()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 3: check wins()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 4: check losses()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 5: check remaining()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 6: check against()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 7a: check isEliminated() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 7b: check isEliminated() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 7c: check isEliminated() when n = 6 to 19
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
==> passed

Test 7d: check isEliminated() when n = 20 to 30
  * teams24.txt
  * teams29.txt
  * teams30.txt
==> passed

Test 7e: check isEliminated() when n = 30 to 50
  * teams32.txt
  * teams36.txt
  * teams42.txt
  * teams48.txt
==> passed

Test 8: check that isEliminated() is consistent with certificateOfElimination()
  * teams4.txt
  * teams5.txt
  * teams8.txt
  * teams10.txt
  * teams29.txt
  * teams48.txt
==> passed

Test 9a: check certificateOfElimination() when n = 4
  * teams4.txt
  * teams4a.txt
  * teams4b.txt
==> passed

Test 9b: check certificateOfElimination() when n = 5
  * teams5.txt
  * teams5a.txt
  * teams5b.txt
  * teams5c.txt
==> passed

Test 9c: check certificateOfElimination() when n = 6 to 20
  * teams7.txt
  * teams8.txt
  * teams10.txt
  * teams12.txt
  * teams12-allgames.txt
==> passed

Test 9d: check certificateOfElimination() when n = 20 to 30
  * teams24.txt
  * teams29.txt
  * teams30.txt
==> passed

Test 9e: check certificateOfElimination() when n = 30 to 50
  * teams32.txt
  * teams36.txt
  * teams42.txt
  * teams48.txt
==> passed

Test 10: check methods when n = 1
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
  * teams1.txt
==> passed

Test 11: check immutability by calling certificateOfElimination() both before
         and after calling isEliminated() and verifying that the results match
  * teams4.txt
  * teams5.txt
  * teams29.txt
==> passed

Test 12: check that certificateOfElimination() returns null for eliminated teams
  * teams4.txt
  * teams5.txt
==> passed

Test 13: check for invalid arguments
  * teams4.txt
  * teams5.txt
==> passed

Test 14: check for dependence on reference equality of strings
==> passed

Test 15: check that two Baseball objects can be created at the same time
  * teams4.txt and teams5.txt
  * teams5.txt and teams7.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TIMING
********************************************************************************

Timing BaseballElimination
*-----------------------------------------------------------
Running 1 total tests.

    n   constructor isEliminated() + certificateOfElimination()
----------------------------------------------------------------
   30       0.01       0.39
   36       0.00       0.83
   42       0.00       1.60
   48       0.01       2.79
   54       0.00       4.04
   60       0.00       6.47
time = 5.06e-07 * n^4.00  (R^2 = 1.00)

Total: 1/1 tests passed!


================================================================



********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of BaseballElimination
*-----------------------------------------------------------
Running 4 total tests.

Student   vertices     = 111.11 n^2 - 4165.67 n + 36002.00   (R^2 = 0.743)
Reference vertices     = 0.50 n^2 - 0.50 n + 3.00   (R^2 = 1.000)
=> FAILED, memory usage does not appear to fit a 2nd order polynomial (R < 0.9)

Student   edges        = 1.50 n^2 - 3.64 n + 3.12   (R^2 = 1.000)
Reference edges        = 1.50 n^2 - 3.50 n + 2.00   (R^2 = 1.000)
=> passed

Student   memory of G  = 4600.51 n^2 - 166997.47 n + 1440402.71   (R^2 = 0.773)
Reference memory of G  = 176.00 n^2 - 384.00 n + 384.00   (R^2 = 1.000)
=> FAILED, memory usage does not appear to fit a 2nd order polynomial (R < 0.9)

Student   memory       = 7.66 n^2 + 412.63 n + 405.71   (R^2 = 1.000)
Reference memory       = 3.99 n^2 + 214.25 n + 396.00   (R^2 = 1.000)
=> passed

Total: 2/4 tests passed!


================================================================




