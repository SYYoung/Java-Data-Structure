/* *****************************************************************************
 *  Name:
 *  Date:
 *  Description:
 **************************************************************************** */

import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.Picture;
import edu.princeton.cs.algs4.Queue;
import edu.princeton.cs.algs4.RedBlackBST;
import edu.princeton.cs.algs4.StdOut;

public class SeamCarver {

    private static final int HIGHEST_ENERGY = 1000;
    private int[][] curPictureRGB;
    private int height;
    private int width;
    private double[][] curEnergy;


    // create a seam carver object based on the given picture
    public SeamCarver(Picture picture) {
        if (picture == null)
            throw new IllegalArgumentException();
        height = picture.height();
        width = picture.width();
        curEnergy = new double[width][height];
        curPictureRGB = new int[width][height];

        // init the picture RGB
        for (int i = 0; i < height; i++)
            for (int j = 0; j < width; j++)
                curPictureRGB[j][i] = picture.getRGB(j, i);

        for (int i = 0; i < height; i++)
            for (int j = 0; j < width; j++) {
                if (i == 0) // top row
                    curEnergy[j][i] = HIGHEST_ENERGY;
                else if (i == height - 1)
                    curEnergy[j][i] = HIGHEST_ENERGY;
                else if (j % width == 0)
                    curEnergy[j][i] = HIGHEST_ENERGY;
                else if (j % width == width - 1)
                    curEnergy[j][i] = HIGHEST_ENERGY;
                else
                    curEnergy[j][i] = Integer.MAX_VALUE;
            }

    }

    // current picture
    public Picture picture() {
        // create a picture object from curPictureRGB
        Picture pic = new Picture(width, height);
        for (int i = 0; i < height; i++)
            for (int j = 0; j < width; j++)
                pic.setRGB(j, i, curPictureRGB[j][i]);
        return pic;
    }

    // width of current picture
    public int width() {
        return width;
    }

    // height of current picture
    public int height() {
        return height;
    }

    // energy of pixel at column x and row y
    public double energy(int x, int y) {
        if (!validCoord(x, y))
            throw new IllegalArgumentException();
        if (curEnergy[x][y] == Integer.MAX_VALUE)
            curEnergy[x][y] = calEnergy(x, y);
        return (curEnergy[x][y]);
    }

    // sequence of indices for horizonal seam
    public int[] findHorizontalSeam() {
        int[] edgeTo = new int[width * height];
        double[] distTo = new double[width * height];
        for (int i = 0; i < width * height; i++)
            distTo[i] = Integer.MAX_VALUE;

        // for each vertex on the left col, find the STP
        for (int from = 0; from < width * height; from = from + width) {
            distTo[from] = energy(from % width, from / width);
            edgeTo[from] = from;
            Queue<Integer> pq = new Queue<>();
            RedBlackBST<Integer, Integer> treeNode = new RedBlackBST<Integer, Integer>();
            pq.enqueue(from);
            treeNode.put(from, from);
            int x, y, to;
            while (!pq.isEmpty()) {
                int v = pq.dequeue();
                treeNode.delete(v);
                if (v % width == width - 1) // reach right line
                    break;
                x = v % width;
                y = v / width;
                to = v - width + 1;
                if (validCoord(x + 1, y - 1)) {
                    if (relax(v, to, edgeTo, distTo))
                        if (!treeNode.contains(to)) {
                            pq.enqueue(to);
                            treeNode.put(to, to);
                        }
                }
                to = v + 1;
                if (validCoord(x + 1, y)) {
                    if (relax(v, to, edgeTo, distTo))
                        if (!treeNode.contains(to)) {
                            pq.enqueue(to);
                            treeNode.put(to, to);
                        }
                }
                to = v + width + 1;
                if (validCoord(x + 1, y + 1)) {
                    if (relax(v, to, edgeTo, distTo))
                        if (!treeNode.contains(to)) {
                            pq.enqueue(to);
                            treeNode.put(to, to);
                        }
                }
            }
        }

        int rightIndex = getRightIndex(distTo);
        // save energy in curEnergy
        int[] hortIndex = new int[width];
        int last = rightIndex;
        for (int i = width - 1; i >= 0; i--) {
            hortIndex[i] = last / width;
            last = edgeTo[last];
        }
        return hortIndex;
    }

    // sequence of indices for vertical seam
    public int[] findVerticalSeam() {
        int[] edgeTo = new int[width * height];
        double[] distTo = new double[width * height];
        for (int i = 0; i < width * height; i++)
            distTo[i] = Integer.MAX_VALUE;

        // for each vertex on the top row, find the STP
        for (int from = 0; from < width; from++) {
            distTo[from] = energy(from % width, from / width);
            edgeTo[from] = from;
            MinPQ<Integer> pq = new MinPQ<>();
            pq.insert(from);
            int x, y, to;
            while (!pq.isEmpty()) {
                int v = pq.delMin();
                if (v / width == height - 1) // reach bottom line
                    break;
                x = v % width;
                y = v / width;
                to = v + width - 1;
                if (validCoord(x - 1, y + 1)) {
                    if (relax(v, to, edgeTo, distTo))
                        pq.insert(to);
                }
                to = v + width;
                if (validCoord(x, y + 1)) {
                    if (relax(v, to, edgeTo, distTo))
                        pq.insert(to);
                }
                to = v + width + 1;
                if (validCoord(x + 1, y + 1)) {
                    if (relax(v, to, edgeTo, distTo))
                        pq.insert(to);
                }
            }
        }

        int botIndex = getBottomIndex(distTo);
        // save energy in curEnergy
        int[] vertIndex = new int[height];
        int last = botIndex;
        for (int i = height - 1; i >= 0; i--) {
            vertIndex[i] = last % width;
            last = edgeTo[last];
        }
        return vertIndex;
    }

    // remove horizontal seam from current picture
    public void removeHorizontalSeam(int[] seam) {
        boolean isVertical = false;
        if ((seam == null) || (seam.length != width) || !validSeamArray(seam, isVertical)
                || (height <= 1))
            throw new IllegalArgumentException();
        int[] tmpPixel = new int[height];
        double[] tmpEnergy = new double[height];
        // update pixel
        int col = 0;
        for (int i = 0; i < seam.length; i++) {
            System.arraycopy(curPictureRGB[col], seam[i] + 1, tmpPixel, 0, height - seam[i] - 1);
            System.arraycopy(tmpPixel, 0, curPictureRGB[col], seam[i], height - seam[i] - 1);
            col++;
        }
        // 2. update the energy values of the removed neighbors
        col = 0;
        for (int i = 0; i < seam.length; i++) {
            System.arraycopy(curEnergy[col], seam[i] + 1, tmpEnergy, 0, height - seam[i] - 1);
            System.arraycopy(tmpEnergy, 0, curEnergy[col], seam[i], height - seam[i] - 1);
            col++;
        }
        height--;

        // 3. re-calculate the energy function
        col = 0;
        for (int i = 0; i < seam.length; i++) {
            int row = seam[i];
            if (validCoord(col, row - 1))
                curEnergy[col][row - 1] = calEnergy(col, row - 1);
            if (validCoord(col - 1, row))
                curEnergy[col - 1][row] = calEnergy(col - 1, row);
            if (validCoord(col, row))
                curEnergy[col][row] = calEnergy(col, row);
            if (validCoord(col + 1, row))
                curEnergy[col + 1][row] = calEnergy(col + 1, row);
            col++;
        }
    }

    // remove vertical seam from current picture
    public void removeVerticalSeam(int[] seam) {
        boolean isVertical = true;
        if ((seam == null) || (seam.length != height) || !validSeamArray(seam, isVertical)
                || (width <= 1))
            throw new IllegalArgumentException();

        // update pixel
        int row = 0;
        for (int i = 0; i < seam.length; i++) {
            for (int j = seam[i]; j < width - 1; j++)
                curPictureRGB[j][row] = curPictureRGB[j + 1][row];
            row++;
        }
        // 2. update the energy values of the removed neighbors
        row = 0;
        for (int i = 0; i < seam.length; i++) {
            for (int j = seam[i]; j < width - 1; j++)
                curEnergy[j][row] = curEnergy[j + 1][row];
            row++;
        }
        width--;

        // 3. re-calculate the energy function
        int col = 0;
        for (int i = 0; i < seam.length; i++) {
            row = seam[i];
            if (validCoord(col, row - 1))
                curEnergy[col][row - 1] = calEnergy(col, row - 1);
            if (validCoord(col - 1, row))
                curEnergy[col - 1][row] = calEnergy(col - 1, row);
            if (validCoord(col, row))
                curEnergy[col][row] = calEnergy(col, row);
            if (validCoord(col + 1, row))
                curEnergy[col + 1][row] = calEnergy(col + 1, row);
            col++;
        }
    }

    // unit testing
    public static void main(String[] args) {
        int test = 3;
        String fname = "";
        if (test == 1)
            fname = "6x5.png";
        else if (test == 2)
            fname = "8x1.png";
        else if (test == 3)
            fname = "1x8.png";
        fname = args[0];
        Picture pic = new Picture(fname);
        SeamCarver mySeam = new SeamCarver(pic);
        int wd = mySeam.width();
        int ht = mySeam.height();
        double energy;
        /*
        for (int i = 0; i < wd * ht; i++)
            energy = mySeam.energy(i % wd, i / wd);
        int[] vertSeam = mySeam.findVerticalSeam();
        for (int i = 0; i < vertSeam.length; i++)
            StdOut.println(vertSeam[i]);
        int[] ans = mySeam.findVerticalSeam();
         */

        if (test == 2) {
            int[] ans = { 0 };
            mySeam.removeVerticalSeam(ans);
        }
        if (test == 1) {
            int[] ans = { 3, 4, 3, 2, 1 };
            mySeam.removeVerticalSeam(ans);
        }
        if (test == 3) {
            int[] ans = mySeam.findHorizontalSeam();
            StdOut.println("The horizontal path:");
            for (int i = 0; i < ans.length; i++)
                StdOut.println(ans[i]);
        }
    }

    private boolean validCoord(int x, int y) {
        if ((x < 0) || (x > width - 1))
            return false;
        if ((y < 0) || (y > height - 1))
            return false;
        return true;
    }

    private boolean validCoord(int v) {
        int x = v % width;
        int y = v / width;
        if ((x < 0) || (x > width - 1))
            return false;
        if ((y < 0) || (y > height - 1))
            return false;
        return true;
    }

    private boolean validSeamArray(int[] arr, boolean isVertical) {
        int boundary;
        if (isVertical)
            boundary = width - 1;
        else
            boundary = height - 1;
        int val = arr[0];
        if ((val < 0) || (val > boundary))
            return false;
        for (int i = 1; i < arr.length; i++) {
            if (Math.abs(arr[i] - val) > 1)
                return false;
            if ((arr[i] < 0) || (arr[i] > boundary))
                return false;
            val = arr[i];
        }
        return true;
    }

    private boolean isXBorder(int x) {
        if ((x == 0) || (x == width - 1))
            return true;
        else
            return false;
    }

    private boolean isYBorder(int y) {
        if ((y == 0) || (y == height - 1))
            return true;
        else
            return false;
    }

    private double calXGradSquare(int x, int y) {
        int leftRBG, rightRGB;
        leftRBG = curPictureRGB[x - 1][y];
        rightRGB = curPictureRGB[x + 1][y];

        int lr = (leftRBG >> 16) & 0xFF;
        int lg = (leftRBG >> 8) & 0xFF;
        int lb = (leftRBG >> 0) & 0xFF;
        int rr = (rightRGB >> 16) & 0xFF;
        int rg = (rightRGB >> 8) & 0xFF;
        int rb = (rightRGB >> 0) & 0xFF;
        return (Math.pow(lr - rr, 2) + Math.pow(lg - rg, 2) + Math.pow(lb - rb, 2));
    }

    private double calYGradSquare(int x, int y) {
        int upRGB, downRGB;
        upRGB = curPictureRGB[x][y - 1];
        downRGB = curPictureRGB[x][y + 1];

        int ur = (upRGB >> 16) & 0xFF;
        int ug = (upRGB >> 8) & 0xFF;
        int ub = (upRGB >> 0) & 0xFF;
        int dr = (downRGB >> 16) & 0xFF;
        int dg = (downRGB >> 8) & 0xFF;
        int db = (downRGB >> 0) & 0xFF;
        return (Math.pow(ur - dr, 2) + Math.pow(ug - dg, 2) + Math.pow(ub - db, 2));
    }

    private boolean relax(int from, int to, int[] edgeTo, double[] distTo) {
        double curVal = energy(to % width, to / width);
        boolean status = false;
        if (distTo[to] > distTo[from] + curVal) {
            distTo[to] = distTo[from] + curVal;
            edgeTo[to] = from;
            status = true;
        }
        return status;
    }

    private double calEnergy(int x, int y) {
        double val;
        if (y == 0) // top row
            val = HIGHEST_ENERGY;
        else if (y == height - 1)
            val = HIGHEST_ENERGY;
        else if (x % width == 0)
            val = HIGHEST_ENERGY;
        else if (x % width == width - 1)
            val = HIGHEST_ENERGY;
        else {
            double xGradSQ = calXGradSquare(x, y);
            double yGradSQ = calYGradSquare(x, y);
            val = Math.sqrt(xGradSQ + yGradSQ);
        }

        return val;
    }

    private int getBottomIndex(double[] dist) {
        double min = Double.MAX_VALUE;
        int whichIndex = 0;
        for (int i = width * height - width; i < width * height; i++) {
            if (min > dist[i]) {
                min = dist[i];
                whichIndex = i;
            }
        }
        return whichIndex;
    }

    private int getRightIndex(double[] dist) {
        double min = Double.MAX_VALUE;
        int whichIndex = 0;
        for (int i = width - 1; i < width * height; i = i + width) {
            if (min > dist[i]) {
                min = dist[i];
                whichIndex = i;
            }
        }
        return whichIndex;
    }
}
