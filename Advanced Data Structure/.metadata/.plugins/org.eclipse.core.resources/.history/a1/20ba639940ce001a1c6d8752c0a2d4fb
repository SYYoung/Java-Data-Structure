/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which reprsents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
package roadgraph;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Objects;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.function.Consumer;

import geography.GeographicPoint;
import util.GraphLoader;

/**
 * @author UCSD MOOC development team and YOU
 * 
 * A class which represents a graph of geographic locations
 * Nodes in the graph are intersections between 
 *
 */
public class MapGraph {
	//TODO: Add your member variables here in WEEK 3
	HashMap<GeographicPoint, MapNode> nodeMap;
	int numNode;
	int numEdge;
	HashMap<MapNode, Double> distSoFar;
	final int DIJKSTRA = 0; // it affects the cost function
	final int ASTAR = 1;
	int searchAlg;
	
	/** 
	 * Create a new empty MapGraph 
	 */
	public MapGraph()
	{
		// TODO: Implement in this constructor in WEEK 3
		nodeMap = new HashMap<GeographicPoint, MapNode>();
		numNode = 0;
		numEdge = 0;
		distSoFar = new HashMap<MapNode, Double>();
	}
	
	/**
	 * Get the number of vertices (road intersections) in the graph
	 * @return The number of vertices in the graph.
	 */
	public int getNumVertices()
	{
		//TODO: Implement this method in WEEK 3
		return numNode;
	}
	
	/**
	 * Return the intersections, which are the vertices in this graph.
	 * @return The vertices in this graph as GeographicPoints
	 */
	public Set<GeographicPoint> getVertices()
	{
		//TODO: Implement this method in WEEK 3
		return nodeMap.keySet();
	}
	
	/**
	 * Get the number of road segments in the graph
	 * @return The number of edges in the graph.
	 */
	public int getNumEdges()
	{
		//TODO: Implement this method in WEEK 3
		return numEdge;
	}

	
	
	/** Add a node corresponding to an intersection at a Geographic Point
	 * If the location is already in the graph or null, this method does 
	 * not change the graph.
	 * @param location  The location of the intersection
	 * @return true if a node was added, false if it was not (the node
	 * was already in the graph, or the parameter is null).
	 */
	public boolean addVertex(GeographicPoint location)
	{
		// TODO: Implement this method in WEEK 3
		// 1. check this vertex has been in the graph or not
		if (nodeMap.get(location) == null) {
			MapNode newNode = new MapNode(location);
			nodeMap.put(location, newNode);
			numNode++;
			distSoFar.put(newNode, Double.MAX_VALUE);
			return true;
		}
		else 
			return false;
	}
	
	/**
	 * Adds a directed edge to the graph from pt1 to pt2.  
	 * Precondition: Both GeographicPoints have already been added to the graph
	 * @param from The starting point of the edge
	 * @param to The ending point of the edge
	 * @param roadName The name of the road
	 * @param roadType The type of the road
	 * @param length The length of the road, in km
	 * @throws IllegalArgumentException If the points have not already been
	 *   added as nodes to the graph, if any of the arguments is null,
	 *   or if the length is less than 0.
	 */
	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType, double length) throws IllegalArgumentException {

		//TODO: Implement this method in WEEK 3
		// 1. verification of the arguments
		if ((from == null) || (to == null) || (roadName == null) ||(roadType == null)
				|| (nodeMap.get(from) == null) || (nodeMap.get(to)==null) ||
				(length < 0))
			throw new IllegalArgumentException();	
		
		MapNode fromNode = nodeMap.get(from);
		fromNode.addEdge(from, to, roadName, roadType, length);
		numEdge++;
	}
	

	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return bfs(start, goal, temp);
	}
	
	/** Find the path from start to goal using breadth first search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest (unweighted)
	 *   path from start to goal (including both start and goal).
	 */
	public List<GeographicPoint> bfs(GeographicPoint start, 
			 					     GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 3
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		List<MapNode> queue = new LinkedList<MapNode>();
		HashSet<GeographicPoint> visitedLoc = new HashSet<GeographicPoint>();
		HashMap<GeographicPoint, GeographicPoint> parentMap = 
				new HashMap<GeographicPoint, GeographicPoint>();
		List<GeographicPoint> path = new ArrayList<GeographicPoint>();
		
		// check if the start point and end point are valid vertex
		if ((nodeMap.get(start) == null) || (nodeMap.get(goal)==null))
			return path; // return an empty path
		
		MapNode curNode = nodeMap.get(start);
		visitedLoc.add(curNode.getLoc());
		queue.add(curNode);
		while (queue.size() > 0) {
			curNode = queue.remove(0);
			if (curNode.equals(goal))
				break;
			for (MapEdge edge : curNode.getOutEdge()) {
				GeographicPoint endPoint = edge.getEndPoint();
				if (!visitedLoc.contains(endPoint)) {
					visitedLoc.add(endPoint);
					queue.add(nodeMap.get(endPoint));
					parentMap.put(endPoint, curNode.getLoc());
					nodeSearched.accept(endPoint);
				}
			}
		}

		if (parentMap.get(goal) != null)
			path = constructPath(start, goal, parentMap);
		return path;
	}
	
	private List<GeographicPoint> constructPath(GeographicPoint start, 
					GeographicPoint goal, HashMap<GeographicPoint, GeographicPoint> parentMap)
	{
		List<GeographicPoint> route = new LinkedList<GeographicPoint>();
		boolean done = false;
		GeographicPoint curPoint = goal;
		while (!done) {
			route.add(0, curPoint);
			if ((curPoint.getX() == start.getX()) &&
					(curPoint.getY() == start.getY()))
				done = true;
			GeographicPoint prev = parentMap.get(curPoint);
			curPoint = prev;
		}
		return route;
	}

	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
		// You do not need to change this method.
        Consumer<GeographicPoint> temp = (x) -> {};
        return dijkstra(start, goal, temp);
	}
	
	/** Find the path from start to goal using Dijkstra's algorithm
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> dijkstra(GeographicPoint start, 
			  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{	
		List<GeographicPoint> path = searchPathWithCost(start, goal, nodeSearched, DIJKSTRA);
		return path;
	}
	
	public List<GeographicPoint> dijkstraOld(GeographicPoint start, 
										  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		PriorityQueue<MapNode> queue = new PriorityQueue<MapNode>();
		HashSet<GeographicPoint> visitedLoc = new HashSet<GeographicPoint>();
		HashMap<GeographicPoint, GeographicPoint> parentMap = 
				new HashMap<GeographicPoint, GeographicPoint>();
		List<GeographicPoint> path = new ArrayList<GeographicPoint>();
		
		searchAlg = DIJKSTRA;
		
		// check if the start point and end point are valid vertex
		if ((nodeMap.get(start) == null) || (nodeMap.get(goal)==null))
			return path; // return an empty path
		
		MapNode curNode = nodeMap.get(start);
		curNode.setDistSoFar(0);
		queue.add(curNode);
		int totalNodeVisited = 0;
		
		while (queue.size() > 0) {
			curNode = queue.remove();
			// if this node has been visited before. if yes, no need to include it again
			if (!visitedLoc.contains(curNode.getLoc()))
			{
				visitedLoc.add(curNode.getLoc());
				totalNodeVisited++;
				if (curNode.equals(goal))
					break;
				double curDistSoFar = curNode.getDistSoFar();
				for (MapEdge edge : curNode.getOutEdge()) {
					GeographicPoint endPoint = edge.getEndPoint();
					if (!visitedLoc.contains(endPoint)) {
						MapNode endNode = nodeMap.get(endPoint);
						if (endNode.getDistSoFar() > curDistSoFar + edge.getDistance())
						{
							endNode.setDistSoFar(curDistSoFar+edge.getDistance());
							queue.add(nodeMap.get(endPoint));
							parentMap.put(endPoint, curNode.getLoc());
							nodeSearched.accept(endPoint);
						}
					}
				}
			}
		}
		
		System.out.println("Under Dijkstra, total nodes visisted: " +totalNodeVisited);
		if (parentMap.get(goal) != null)
			path = constructPath(start, goal, parentMap);
		return path;
		
	}

	private double calculateCost(double curDistance, MapEdge edge,
							MapNode endNode, GeographicPoint goal, int searchType)
	{
		double totalCost = 0;
		double startCost = 0;
		startCost = curDistance + edge.getDistance();
		if (searchType == DIJKSTRA)
		{
			totalCost = startCost;
		}
		else if (searchType == ASTAR)
		{
			totalCost = startCost + endNode.getLoc().distance(goal);
		}
		return totalCost;
	}
	
	public List<GeographicPoint> searchPathWithCost(GeographicPoint start, 
			  GeographicPoint goal, Consumer<GeographicPoint> nodeSearched, int searchType)
	{
		// TODO: Implement this method in WEEK 4

		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		PriorityQueue<MapNode> queue = new PriorityQueue<MapNode>();
		HashSet<GeographicPoint> visitedLoc = new HashSet<GeographicPoint>();
		HashMap<GeographicPoint, GeographicPoint> parentMap = 
				new HashMap<GeographicPoint, GeographicPoint>();
		List<GeographicPoint> path = new ArrayList<GeographicPoint>();
		
		// check if the start point and end point are valid vertex
		if ((nodeMap.get(start) == null) || (nodeMap.get(goal)==null))
			return path; // return an empty path
		
		// reset the cost inside each node
		resetNodeCost();
		
		MapNode curNode = nodeMap.get(start);
		curNode.setDistSoFar(0);
		queue.add(curNode);
		int totalNodeVisited = 0;
		
		while (queue.size() > 0) {
			curNode = queue.remove();
			// if this node has been visited before. if yes, no need to include it again
			if (!visitedLoc.contains(curNode.getLoc()))
			{
				visitedLoc.add(curNode.getLoc());
				totalNodeVisited++;
				if (curNode.equals(goal))
					break;
				double curDistSoFar = curNode.getDistSoFar();
				for (MapEdge edge : curNode.getOutEdge()) {
					GeographicPoint endPoint = edge.getEndPoint();
					if (!visitedLoc.contains(endPoint)) {
						MapNode endNode = nodeMap.get(endPoint);
						double totalCost = calculateCost(curDistSoFar, edge, endNode, goal,
														searchType);
						if (endNode.getDistSoFar() > totalCost)
						{
							endNode.setDistSoFar(totalCost);
							queue.add(nodeMap.get(endPoint));
							parentMap.put(endPoint, curNode.getLoc());
							nodeSearched.accept(endPoint);
						}
					}
				}
			}
		}
		
		System.out.println("Under " +searchType + ", total nodes visisted: " +totalNodeVisited);
		if (parentMap.get(goal) != null)
			path = constructPath(start, goal, parentMap);
		return path;
		
	}

	private void resetNodeCost() {
		// TODO Auto-generated method stub
		for (MapNode eachNode : nodeMap.values())
			eachNode.resetCost();
		
	}

	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, GeographicPoint goal) {
		// Dummy variable for calling the search algorithms
        Consumer<GeographicPoint> temp = (x) -> {};
        return aStarSearch(start, goal, temp);
	}
	
	/** Find the path from start to goal using A-Star search
	 * 
	 * @param start The starting location
	 * @param goal The goal location
	 * @param nodeSearched A hook for visualization.  See assignment instructions for how to use it.
	 * @return The list of intersections that form the shortest path from 
	 *   start to goal (including both start and goal).
	 */
	public List<GeographicPoint> aStarSearch(GeographicPoint start, 
											 GeographicPoint goal, Consumer<GeographicPoint> nodeSearched)
	{
		// TODO: Implement this method in WEEK 4
		
		// Hook for visualization.  See writeup.
		//nodeSearched.accept(next.getLocation());
		List<GeographicPoint> path = searchPathWithCost(start, goal, nodeSearched, ASTAR);
		return path;
	}

	public void printGraph() 
	{
		System.out.println("Print the graph.");
		for (MapNode eachNode : nodeMap.values()) {
			eachNode.printNode();
		}
	}
	
	public static void main(String[] args)
	{
		System.out.print("Making a new map...");
		MapGraph firstMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", firstMap);
		//firstMap.printGraph();
		System.out.println("DONE.");
		
		// You can use this method for testing.  
		
		
		/* Here are some test cases you should try before you attempt 
		 * the Week 3 End of Week Quiz, EVEN IF you score 100% on the 
		 * programming assignment.
		 */
		
		MapGraph simpleTestMap = new MapGraph();
		GraphLoader.loadRoadMap("data/testdata/simpletest.map", simpleTestMap);
		
		GeographicPoint point1 = new GeographicPoint(4.0, 0.0);
		GeographicPoint point2 = new GeographicPoint(1.0, 1.0);
		GeographicPoint point3 = new GeographicPoint(8.0, -1.0);
		GeographicPoint testStart = point2;
		GeographicPoint testEnd = point3;
		
		System.out.println("Test 0 using simpletest: bsf");
		List<GeographicPoint> testroute = simpleTestMap.bfs(testStart,testEnd);
		for (GeographicPoint pt : testroute) {
			System.out.println(pt);
		}
		
		
		System.out.println("Test 1 using simpletest: Dijkstra should be 9 and AStar should be 5");
		testroute = simpleTestMap.dijkstra(testStart,testEnd);
		System.out.println("Test 0 using simpletest: Dijkstra");
		for (GeographicPoint pt : testroute) {
			System.out.println(pt);
		}
		
		System.out.println("Test 1 using simpletest: Dijkstra should be 9 and AStar should be 5");
		List<GeographicPoint> testroute2 = simpleTestMap.aStarSearch(testStart, testEnd);
		System.out.println("Test 0 using simpletest: A*");
		for (GeographicPoint pt : testroute2) {
			System.out.println(pt);
		}
		
		
		
		MapGraph testMap = new MapGraph();
		GraphLoader.loadRoadMap("data/maps/utc.map", testMap);
		
		// A very simple test using real data
		testStart = new GeographicPoint(32.869423, -117.220917);
		testEnd = new GeographicPoint(32.869255, -117.216927);
		System.out.println("Test 2 using utc: Dijkstra should be 13 and AStar should be 5");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		
		
		// A slightly more complex test using real data
		testStart = new GeographicPoint(32.8674388, -117.2190213);
		testEnd = new GeographicPoint(32.8697828, -117.2244506);
		System.out.println("Test 3 using utc: Dijkstra should be 37 and AStar should be 10");
		testroute = testMap.dijkstra(testStart,testEnd);
		testroute2 = testMap.aStarSearch(testStart,testEnd);
		
		
		
		/* Use this code in Week 3 End of Week Quiz */
		MapGraph theMap = new MapGraph();
		System.out.print("DONE. \nLoading the map...");
		GraphLoader.loadRoadMap("data/maps/utc.map", theMap);
		System.out.println("DONE.");

		GeographicPoint start = new GeographicPoint(32.8648772, -117.2254046);
		GeographicPoint end = new GeographicPoint(32.8660691, -117.217393);
		
		
		List<GeographicPoint> route = theMap.dijkstra(start,end);
		List<GeographicPoint> route2 = theMap.aStarSearch(start,end);

		
		
	}
	
}

class MapNode implements Comparable<MapNode> {
	GeographicPoint loc;
	String name;
	List<MapEdge> outEdge;
	double distSoFar; // it is for searching algorithm
	
	public MapNode(GeographicPoint point) 
	{
		loc = new GeographicPoint(point.getX(), point.getY());
		name = "";
		outEdge = new ArrayList<MapEdge>();
		distSoFar = Double.MAX_VALUE;
	}
	
	public void resetCost() {
		distSoFar = Double.MAX_VALUE;
		
	}

	public void addEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType, double length) 
	{
		MapEdge newEdge = new MapEdge(from, to, roadName, roadType, length);
		outEdge.add(newEdge);
		
	}
	
	@Override 
	public int hashCode() 
	{
		return Objects.hash(distSoFar);
	}
	
	// Compare two nodes of the distSoFar. it is for the priority queue
	@Override
	public int compareTo(MapNode node2)
	{
		if (this.distSoFar > node2.distSoFar)
			return 1;
		else if (this.distSoFar < node2.distSoFar)
			return -1;
		else
			return 0;
	}
	
	public void printNode() 
	{
		System.out.println("Node: " +name +",\t" +loc +",\t" );
		for (MapEdge eachEdge : outEdge) {
			System.out.println("\t\tEdge:" +eachEdge);
		}
		System.out.println();
	}
	
	public GeographicPoint getLoc() 
	{
		return loc;
	}
	
	public List<MapEdge> getOutEdge()
	{
		return outEdge;
	}
	
	public boolean equals(GeographicPoint point)
	{
		if ((loc.getX() == point.getX()) && (loc.getY() == point.getY()))
			return true;
		else
			return false;
	}
	
	public double getDistSoFar()
	{
		return distSoFar;
	}
	
	public void setDistSoFar(double val)
	{
		distSoFar = val;
	}
}

class MapEdge {
	GeographicPoint fromNode;
	GeographicPoint endNode;
	String edgeName;
	String edgeType;
	double length;
	
	public MapEdge(GeographicPoint from, GeographicPoint to, String roadName,
			String roadType, double dist) 
	{
		this.fromNode = new GeographicPoint(from.getX(), from.getY());
		this.endNode = new GeographicPoint(to.getX(), to.getY());
		this.edgeName = roadName;
		this.edgeType = roadType;
		this.length = dist;
		
	}
	
	public String toString() 
	{
		String outStr = endNode + ",\t" + edgeName + ",\t"  +",\t" +length;
		return outStr;
	}
	
	public GeographicPoint getEndPoint()
	{
		return endNode;
	}
	
	public double getDistance()
	{
		return length;
	}
}
