import edu.princeton.cs.algs4.*;


public class BST<Key extends Comparable<Key>, Value> {
	private Node root;
	
	public void put(Key key, Value val) {
		root = put(root, key, val);
	}
	
	private Node put(Node x, Key key, Value val) {
		if (x == null)
			return new Node(key, val);
		int cmp = key.compareTo(x.key);
		if (cmp < 0)
			x.left = put(x.left, key, val);
		else if (cmp > 0)
			x.right = put(x.right, key, val);
		else
			x.val = val;
		x.count = 1 + size(x.left) + size(x.right);
		return x;
	}
	
	public Value get(Key key) {
		Node x = root;
		while (x != null) {
			int cmp = key.compareTo(x.key);
			if (cmp < 0) 
				x = x.left;
			else if (cmp > 0) 
				x = x.right;
			else 
				return x.val;
					
		}
		return null;
	}
	
	public Iterable<Key> iterator() {
		Queue<Key> q = new Queue<Key>();
		inorder(root, q);
		return q;
	}
	
	private void inorder(Node x, Queue<Key> q) {
		if (x == null) return;
		inorder(x.left, q);
		q.enqueue(x.key);
		inorder(x.right, q);
	}
	
	private class Node {
		private Key key;
		private Value val;
		private Node left, right;
		private int count;
		public Node(Key key, Value val) {
			this.key = key;
			this.val = val;
		}
	}
	
	public Key floor(Key key) {
		Node x = floor(root, key);
		if (x == null)
			return null;
		return x.key;
	}
	
	private Node floor(Node x, Key key) {
		if (x == null)
			return null;
		int cmp = key.compareTo(x.key);
		if (cmp < 0)
			return floor(x.left, key);
		Node t = floor(x.right, key);
		if (t != null)
			return t;
		else
			return x;
	}
	
	public int size() {
		return size(root);
	}
	
	private int size(Node x) {
		if (x == null)
			return 0;
		return x.count;
	}
	
	public int rank(Key key) {
		return rank(key, root);
	}
	
	private int rank(Key key, Node x) {
		if (x == null) 
			return 0;
		int cmp = key.compareTo(x.key);
		if (cmp < 0)
			return rank(key, x.left);
		else if (cmp > 0)
			return 1 + size(x.left)+ rank(key, x.right); 
		else
			return size(x.left);
	}
	
	public void deleteMin() {
		root = deleteMin(root);
	}
	
	private Node deleteMin(Node x) {
		if (x.left == null) 
			return x.right;
		x.left = deleteMin(x.left);
		x.count = 1 + size(x.left) + size(x.right);
		return x;
	}
	
	public void delete(Key key) {
		root = delete(root, key);
	}
	
	private Node min(Node x) {
		if (x == null) return null;
		x.left = min(x.left);
		return x;
	}
	
	private Node delete(Node x, Key key) {
		if (x == null) return null;
		int cmp = key.compareTo(x.key);
		if (cmp < 0) 
			x.left = delete(x.left, key);
		else if (cmp > 0)
			x.right = delete(x.right, key);
		else {
			if (x.right == null) return x.left;
			else if (x.left == null) return x.right;
			Node t = x;
			x = min(t.right);
			x.right = deleteMin(t.right);
			x.left = t.left;
		}
		x.count = size(x.left) + size(x.right) + 1;
		return x;
	}
	
	public static void main(String[] args) {
		int testcase = 1;
		if (testcase == 1) {
			String[] s = {"S", "E", "X", "A", "R", "C", "H", "M"};
			BST<String, Integer> myTree = new BST<String, Integer>();
			StdRandom.shuffle(s);
			for (int i=0; i<s.length; i++) {
				myTree.put(s[i], i);
			}
			for (String key : myTree.iterator())
				StdOut.print("\t" + key);
			// test insert G
			myTree.put("G", s.length);
			StdOut.println("After inserting G, the tree look like:");
			for (String key : myTree.iterator())
				StdOut.print("\t" + key);
			
			// test get
			int val = myTree.get("S");
			StdOut.println("The value of key=S is " + val);
			
			// test floor and ceiling
			myTree.delete("G");
			String input = "G";
			String result = myTree.floor(input);
			StdOut.println("floor(" +input +")= " + result);
		}
	}
	
}
