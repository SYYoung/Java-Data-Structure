
public class UF {
	public UF(int N) {
		
	}
	
	public void union(int p, int q) {
		
	}
	
	public int find(int p) {
		return 1;
	}
	
	public boolean connected(int p, int q) {
		return find(p)==find(q);
	}
	
	private static UF loadGraph(String filename)
	{
		BufferedReader reader = null;
        try {
            String nextLine;
            reader = new BufferedReader(new FileReader(filename));
            nextLine = reader.readLine();
            if (nextLine == null) {
            	reader.close();
            	throw new IOException("Graph file is empty!");
            }
            int numVertices = Integer.parseInt(nextLine);
            for (int i = 0; i < numVertices; i++) {
            	theGraph.addVertex();
            }
            // Read the lines out of the file and put them in a HashMap by points
            while ((nextLine = reader.readLine()) != null) {
            	String[] verts = nextLine.split(" ");
            	int start = Integer.parseInt(verts[0]);
            	int end = Integer.parseInt(verts[1]);
            	theGraph.addEdge(start, end);
            }
            reader.close();
        } catch (IOException e) {
            System.err.println("Problem loading graph file: " + filename);
            e.printStackTrace();
        }
	}
	
	public static void main(String[] args) 
	{
		String fname = "./data/test1.txt";
		UF myUF = loadGraph(fname);
	}
}
